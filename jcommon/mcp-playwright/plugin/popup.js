import { captureFullPage } from './screenshotManager.js';
import { getAllTabs } from './tabManager.js';
import { toggleEffect } from './effectsManager.js';
import { BorderManager } from './borderManager.js';
import { MouseTracker } from './mouseTracker.js';

// Á≠âÂæÖDOMÂä†ËΩΩÂÆåÊàêÂêéÊâßË°å
document.addEventListener('DOMContentLoaded', () => {
    console.log('Popup script loaded and DOM is ready');
    
    // Ê∑ªÂä†ÊòæÁ§∫Ê†áÁ≠æÈ°µÊåâÈíÆÁöÑ‰∫ã‰ª∂ÁõëÂê¨
    document.getElementById('showTabs').addEventListener('click', async () => {
        try {
            const tabs = await getAllTabs({ currentWindow: true });
            const tabsList = document.getElementById('tabs-list');
            
            // Ê∏ÖÁ©∫‰πãÂâçÁöÑÂàóË°®
            tabsList.innerHTML = '';
            
            // ÂàõÂª∫Ê†áÁ≠æÈ°µÂàóË°®
            const ul = document.createElement('ul');
            ul.style.listStyle = 'none';
            ul.style.padding = '10px';
            ul.style.margin = '10px 0';
            ul.style.maxHeight = '200px';
            ul.style.overflowY = 'auto';
            ul.style.border = '1px solid #ccc';
            ul.style.borderRadius = '4px';
            
            tabs.forEach((tab, index) => {
                const li = document.createElement('li');
                li.textContent = `${index + 1}. ${tab.title}`;
                li.style.padding = '5px 0';
                li.style.borderBottom = '1px solid #eee';
                li.style.fontSize = '12px';
                li.style.whiteSpace = 'nowrap';
                li.style.overflow = 'hidden';
                li.style.textOverflow = 'ellipsis';
                ul.appendChild(li);
            });
            
            tabsList.appendChild(ul);
        } catch (error) {
            console.error('Error showing tabs:', error);
            document.getElementById('tabs-list').innerHTML = 
                `<p style="color: red;">Ëé∑ÂèñÊ†áÁ≠æÈ°µÂ§±Ë¥•: ${error.message}</p>`;
        }
    });

    // Ê∑ªÂä†‰∏ãÈõ®ÁâπÊïàÊåâÈíÆ‰∫ã‰ª∂ÁõëÂê¨
    document.getElementById('rainEffect').addEventListener('click', async () => {
        const button = document.getElementById('rainEffect');
        const isEffectOn = await toggleEffect('rain');
        button.textContent = isEffectOn ? 'üåßÔ∏è ÂÖ≥Èó≠‰∏ãÈõ®' : 'üåßÔ∏è ‰∏ãÈõ®ÁâπÊïà';
    });

    // Ê∑ªÂä†‰∏ãÈõ™ÁâπÊïàÊåâÈíÆ‰∫ã‰ª∂ÁõëÂê¨
    document.getElementById('snowEffect').addEventListener('click', async () => {
        const button = document.getElementById('snowEffect');
        const isEffectOn = await toggleEffect('snow');
        button.textContent = isEffectOn ? '‚ùÑÔ∏è ÂÖ≥Èó≠‰∏ãÈõ™' : '‚ùÑÔ∏è ‰∏ãÈõ™ÁâπÊïà';
    });

    // Ê∑ªÂä†ËæπÊ°ÜÊåâÈíÆ‰∫ã‰ª∂ÁõëÂê¨
    document.getElementById('addBorders').addEventListener('click', async () => {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        
        chrome.scripting.executeScript({
            target: { tabId: tab.id },
            function: toggleBorders
        });
    });

    let isTracking = false;
    const trackerButton = document.getElementById('toggleMouseTracker');
    
    trackerButton.addEventListener('click', async () => {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        isTracking = !isTracking;
        
        if (isTracking) {
            await MouseTracker.injectTracker(tab.id);
            trackerButton.textContent = 'üî¥ ÂÖ≥Èó≠ËôöÊãüÈº†Ê†á';
            trackerButton.classList.add('active');
        } else {
            await MouseTracker.removeTracker(tab.id);
            trackerButton.textContent = 'üî¥ ËôöÊãüÈº†Ê†áË∑üË∏™';
            trackerButton.classList.remove('active');
        }
    });

    // ‰øÆÊîπÁé∞ÊúâÁöÑÂùêÊ†áÁßªÂä®ÂäüËÉΩ
    document.getElementById('move-to-selector').addEventListener('click', async () => {
        const selector = document.getElementById('selector-input').value;
        if (!selector) {
            alert('ËØ∑ËæìÂÖ•ÈÄâÊã©Âô®');
            return;
        }

        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        const statusText = document.getElementById('status-text');

        try {
            // ÊâßË°åÈÄâÊã©Âô®Êü•ÊâæÂíå‰ΩçÁΩÆËÆ°ÁÆó
            const [{result}] = await chrome.scripting.executeScript({
                target: { tabId: tab.id },
                function: (sel) => {
                    const element = document.querySelector(sel);
                    if (!element) return null;
                    
                    const rect = element.getBoundingClientRect();
                    return {
                        x: Math.round(rect.left + rect.width / 2),
                        y: Math.round(rect.top + rect.height / 2)
                    };
                },
                args: [selector]
            });

            if (result) {
                await MouseTracker.moveToPosition(tab.id, result.x, result.y);
                statusText.textContent = 'Â∑≤ÁßªÂä®Âà∞ÂÖÉÁ¥†‰ΩçÁΩÆ';
                
                // 3ÁßíÂêéÊÅ¢Â§çË∑üË∏™
                setTimeout(async () => {
                    await MouseTracker.resumeTracking(tab.id);
                }, 3000);
            } else {
                statusText.textContent = 'Êú™ÊâæÂà∞ÂåπÈÖçÁöÑÂÖÉÁ¥†';
            }
        } catch (error) {
            statusText.textContent = 'ÂèëÁîüÈîôËØØ: ' + error.message;
        }
    });
});

// ÁõëÂê¨Êù•Ëá™contentscriptÁöÑÊ∂àÊÅØ
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === 'mousePosition') {
        document.getElementById('current-pos').textContent = `X:${message.x}, Y:${message.y}`;
        document.getElementById('x-coord').value = message.x;
        document.getElementById('y-coord').value = message.y;
    } else if (message.type === 'mouseClick') {
        document.getElementById('last-click-pos').textContent = `X:${message.x}, Y:${message.y}`;
    } else if (message.type === 'selectorCopied') {
        const statusText = document.getElementById('status-text') || createStatusElement();
        statusText.textContent = '‚úÖ ÈÄâÊã©Âô®Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø';
        statusText.style.color = '#4CAF50';
        
        setTimeout(() => {
            statusText.textContent = '';
        }, 2000);
    } else if (message.type === 'elementSelector') {
        // Â§çÂà∂ÈÄâÊã©Âô®Âà∞Ââ™Ë¥¥Êùø
        navigator.clipboard.writeText(message.selector).then(() => {
            const statusText = document.getElementById('status-text') || createStatusElement();
            statusText.textContent = '‚úÖ ÈÄâÊã©Âô®Â∑≤Â§çÂà∂: ' + message.selector;
            statusText.style.color = '#4CAF50';
            
            setTimeout(() => {
                statusText.textContent = '';
            }, 2000);
        }).catch(err => {
            console.error('Failed to copy selector:', err);
            const statusText = document.getElementById('status-text') || createStatusElement();
            statusText.textContent = '‚ùå Â§çÂà∂Â§±Ë¥•';
            statusText.style.color = 'red';
        });
    }
});

document.getElementById('click-btn').addEventListener('click', async () => {
    const x = parseInt(document.getElementById('x-coord').value);
    const y = parseInt(document.getElementById('y-coord').value);

    if (isNaN(x) || isNaN(y)) {
        alert('ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÂùêÊ†á');
        return;
    }

    const [tab] = await chrome.tabs.query({active: true, currentWindow: true});

    await chrome.scripting.executeScript({
        target: {tabId: tab.id},
        func: simulateClick,
        args: [x, y]
    });
});

function simulateClick(x, y) {
    const clickEvent = new MouseEvent('click', {
        view: window,
        bubbles: true,
        cancelable: true,
        clientX: x,
        clientY: y
    });

    document.elementFromPoint(x, y)?.dispatchEvent(clickEvent);
}

// popup ÊâìÂºÄÊó∂ÔºåËé∑ÂèñÊúÄÂêéÂ≠òÂÇ®ÁöÑ‰ΩçÁΩÆ
chrome.runtime.sendMessage({ type: 'getLastPosition' }, (response) => {
    if (response) {
        // Êõ¥Êñ∞Èº†Ê†á‰ΩçÁΩÆ
        document.getElementById('current-pos').textContent = `X:${response.mousePosition.x}, Y:${response.mousePosition.y}`;
        document.getElementById('x-coord').value = response.mousePosition.x;
        document.getElementById('y-coord').value = response.mousePosition.y;
        
        // Êõ¥Êñ∞ÊúÄÂêéÁÇπÂáª‰ΩçÁΩÆ
        document.getElementById('last-click-pos').textContent = `X:${response.clickPosition.x}, Y:${response.clickPosition.y}`;
    }
});

// ÁªßÁª≠ÁõëÂê¨ÂÆûÊó∂Êõ¥Êñ∞
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.type === 'mousePosition') {
    // ... Êõ¥Êñ∞UIÁöÑ‰ª£Á†Å ...
  }
});

// Ê∑ªÂä†Êà™Â±èÊåâÈíÆ‰∫ã‰ª∂ÁõëÂê¨
document.getElementById('captureFullPage').addEventListener('click', async () => {
    try {
        const button = document.getElementById('captureFullPage');
        const statusText = document.getElementById('status-text') || createStatusElement();
        
        button.disabled = true;
        button.textContent = 'Êà™Âõæ‰∏≠...';
        statusText.textContent = ''; // Ê∏ÖÈô§‰πãÂâçÁöÑÁä∂ÊÄÅ
        
        await captureFullPage();
        
        button.textContent = 'Êà™ÂõæÊàêÂäüÔºÅ';
        statusText.textContent = '‚úÖ Êà™ÂõæÂ∑≤‰øùÂ≠ò';
        
        setTimeout(() => {
            button.disabled = false;
            button.textContent = 'üì∏ Êà™ÂèñÊï¥È°µ';
            statusText.textContent = '';
        }, 2000);
    } catch (error) {
        console.error('Screenshot failed:', error);
        const button = document.getElementById('captureFullPage');
        const statusText = document.getElementById('status-text') || createStatusElement();
        
        button.textContent = 'Êà™ÂõæÂ§±Ë¥•';
        statusText.textContent = `‚ùå ÈîôËØØ: ${error.message}`;
        statusText.style.color = 'red';
        
        setTimeout(() => {
            button.disabled = false;
            button.textContent = 'üì∏ Êà™ÂèñÊï¥È°µ';
        }, 2000);
    }
});

// ÂàõÂª∫Áä∂ÊÄÅÊñáÊú¨ÂÖÉÁ¥†ÁöÑËæÖÂä©ÂáΩÊï∞
function createStatusElement() {
    const statusText = document.createElement('div');
    statusText.id = 'status-text';
    statusText.style.marginTop = '10px';
    statusText.style.textAlign = 'center';
    document.getElementById('captureFullPage').parentNode.appendChild(statusText);
    return statusText;
}

// Ê∑ªÂä†Ëá™Âä®ÊªöÂä®ÊåâÈíÆ‰∫ã‰ª∂ÁõëÂê¨
document.getElementById('autoScroll').addEventListener('click', async () => {
    const [tab] = await chrome.tabs.query({active: true, currentWindow: true});
    
    // ÊâßË°åËá™Âä®ÊªöÂä®ËÑöÊú¨
    await chrome.scripting.executeScript({
        target: {tabId: tab.id},
        function: autoScrollPage
    });
});

// Ëá™Âä®ÊªöÂä®ÂáΩÊï∞
function autoScrollPage() {
    let lastScrollTop = -1;
    const scrollInterval = setInterval(() => {
        // ÊØèÊ¨°ÊªöÂä®100ÂÉèÁ¥†
        window.scrollBy(0, 100);
        
        // Â¶ÇÊûúÊªöÂä®‰ΩçÁΩÆÊ≤°ÊúâÂèòÂåñÔºåËØ¥ÊòéÂ∑≤ÁªèÂà∞Â∫ï‰∫Ü
        if (lastScrollTop === window.scrollY) {
            clearInterval(scrollInterval);
            console.log('Reached bottom of page');
            return;
        }
        
        lastScrollTop = window.scrollY;
    }, 100); // ÊØè100ÊØ´ÁßíÊªöÂä®‰∏ÄÊ¨°
}

// ‰øÆÊîπËæπÊ°ÜÂ§ÑÁêÜÂáΩÊï∞
function toggleBorders() {
    if (!window._borderManager) {
        class BorderManager {
            constructor() {
                this.borderedElements = new Set();
                this.isActive = false;
                // this.VALID_ELEMENTS = ['div', 'section', 'article', 'main', 'aside', 'header', 'footer', 'nav' , 'input'];
                this.VALID_ELEMENTS = ['input','button','textarea','div'];
                this.MIN_ELEMENT_SIZE = 30;
                this.MAX_ELEMENT_SIZE = 600; // Ê∑ªÂä†ÊúÄÂ§ßÂ∞∫ÂØ∏ÈôêÂà∂
                this.tooltipStyles = `
                    position: absolute;
                    background: rgba(0, 0, 0, 0.8);
                    color: white;
                    padding: 4px 8px;
                    border-radius: 4px;
                    font-size: 12px;
                    z-index: 10000;
                    pointer-events: none;
                    max-width: 300px;
                    word-break: break-all;
                `;
            }

            isValidElement(element) {
                if (!element || !element.getBoundingClientRect) {
                    return false;
                }

                const rect = element.getBoundingClientRect();
                
                // Ê£ÄÊü•ÂÖÉÁ¥†ÊòØÂê¶ÂèØËßÅ
                if (rect.width === 0 || rect.height === 0) {
                    return false;
                }

                // Ê£ÄÊü•ÂÖÉÁ¥†Â∞∫ÂØ∏ÊòØÂê¶Âú®ÂêàÈÄÇËåÉÂõ¥ÂÜÖ
                // Ëá≥Â∞ëÊúâ‰∏Ä‰∏™Áª¥Â∫¶Âú®ÊúÄÂ∞èÂíåÊúÄÂ§ßÂ∞∫ÂØ∏‰πãÈó¥
                const hasValidWidth = rect.width >= this.MIN_ELEMENT_SIZE && rect.width <= this.MAX_ELEMENT_SIZE;
                const hasValidHeight = rect.height >= this.MIN_ELEMENT_SIZE && rect.height <= this.MAX_ELEMENT_SIZE;
                
                if (!hasValidWidth && !hasValidHeight) {
                    return false;
                }

                if (!this.VALID_ELEMENTS.includes(element.tagName.toLowerCase())) {
                    return false;
                }

                // Ê£ÄÊü•Áà∂ÂÖÉÁ¥†ÊòØÂê¶Â∑≤ÊúâËæπÊ°Ü
                let parent = element.parentElement;
                while (parent) {
                    if (this.borderedElements.has(parent)) {
                        return false;
                    }
                    parent = parent.parentElement;
                }

                return true;
            }

            // Ëé∑ÂèñÂÖÉÁ¥†ÁöÑÂîØ‰∏ÄÈÄâÊã©Âô®
            getSelector(element) {
                // 1. Â¶ÇÊûúÊúâ idÔºåÁõ¥Êé•ËøîÂõû
                if (element.id) {
                    return '#' + element.id;
                }
                
                // 2. Â∞ùËØï‰ΩøÁî® class ÁªÑÂêà
                if (element.className) {
                    const classes = Array.from(element.classList)
                        .filter(cls => cls && !cls.includes(' '))  // ËøáÊª§ÊéâÁ©∫Á±ªÂêçÂíåÂåÖÂê´Á©∫Ê†ºÁöÑÁ±ªÂêç
                        .join('.');
                        
                    if (classes) {
                        // Ê£ÄÊü•‰ΩøÁî®Ëøô‰∫õ class ÊòØÂê¶ËÉΩÂîØ‰∏ÄÂÆö‰ΩçÂà∞ÂÖÉÁ¥†
                        const selector = '.' + classes;
                        const elements = document.querySelectorAll(selector);
                        if (elements.length === 1) {
                            return selector;
                        }
                    }
                }
                
                // 3. Â∞ùËØïÊ†áÁ≠æÂêç + class ÁªÑÂêà
                if (element.className) {
                    const selector = `${element.tagName.toLowerCase()}.${Array.from(element.classList)
                        .filter(cls => cls && !cls.includes(' '))
                        .join('.')}`;
                    const elements = document.querySelectorAll(selector);
                    if (elements.length === 1) {
                        return selector;
                    }
                }
                
                // 4. Â¶ÇÊûú‰∏äËø∞ÊñπÊ≥ïÈÉΩ‰∏çËÉΩÂîØ‰∏ÄÂÆö‰ΩçÔºåÂàôÁîüÊàêÊúÄÁü≠ÁöÑÂ±ÇÁ∫ßÈÄâÊã©Âô®
                let current = element;
                let path = [];
                
                while (current && current.tagName) {
                    let selector = current.tagName.toLowerCase();
                    
                    // Ê∑ªÂä† classÔºàÂ¶ÇÊûúÊúâÔºâ
                    if (current.className) {
                        const classes = Array.from(current.classList)
                            .filter(cls => cls && !cls.includes(' '))
                            .join('.');
                        if (classes) {
                            selector += '.' + classes;
                        }
                    }
                    
                    // Â¶ÇÊûúÂΩìÂâçÈÄâÊã©Âô®ÂèØ‰ª•ÂîØ‰∏ÄÂÆö‰ΩçÔºåÂ∞±‰∏çÈúÄË¶ÅÁªßÁª≠ÂæÄ‰∏äÂ±ÇÊü•Êâæ
                    const tempPath = [...path, selector].reverse().join(' > ');
                    if (document.querySelectorAll(tempPath).length === 1) {
                        return tempPath;
                    }
                    
                    // Â¶ÇÊûú‰∏çËÉΩÂîØ‰∏ÄÂÆö‰ΩçÔºåÊ∑ªÂä† nth-child
                    let nth = 1;
                    let sibling = current;
                    while (sibling.previousElementSibling) {
                        sibling = sibling.previousElementSibling;
                        nth++;
                    }
                    selector += `:nth-child(${nth})`;
                    
                    path.push(selector);
                    
                    // Â¶ÇÊûúÈÅáÂà∞Êúâ id ÁöÑÁà∂ÂÖÉÁ¥†ÔºåÂèØ‰ª•ÂÅúÊ≠¢ÂæÄ‰∏äÊü•Êâæ
                    if (current.parentElement && current.parentElement.id) {
                        path.push('#' + current.parentElement.id);
                        break;
                    }
                    
                    current = current.parentElement;
                }
                
                return path.reverse().join(' > ');
            }

            createTooltip(element) {
                const tooltip = document.createElement('div');
                tooltip.className = 'selector-tooltip';
                tooltip.textContent = this.getSelector(element);
                tooltip.style.cssText = this.tooltipStyles;
                document.body.appendChild(tooltip);
                
                // ÂÆö‰ΩçÊèêÁ§∫Ê°Ü
                const updateTooltipPosition = () => {
                    const rect = element.getBoundingClientRect();
                    tooltip.style.left = rect.left + window.scrollX + 'px';
                    tooltip.style.top = (rect.top + window.scrollY - tooltip.offsetHeight - 5) + 'px';
                };
                
                updateTooltipPosition();
                element._tooltipUpdatePosition = updateTooltipPosition;
                element._tooltip = tooltip;
                
                // Ê∑ªÂä†ÊªöÂä®ÁõëÂê¨
                window.addEventListener('scroll', updateTooltipPosition);
                window.addEventListener('resize', updateTooltipPosition);
            }

            removeTooltip(element) {
                if (element._tooltip) {
                    element._tooltip.remove();
                    window.removeEventListener('scroll', element._tooltipUpdatePosition);
                    window.removeEventListener('resize', element._tooltipUpdatePosition);
                    delete element._tooltip;
                    delete element._tooltipUpdatePosition;
                }
            }

            addBorder(element) {
                // Ê£ÄÊü•Â≠êÂÖÉÁ¥†ÊòØÂê¶ÊúâÂèØ‰ª•Ê∑ªÂä†ËæπÊ°ÜÁöÑÂÖÉÁ¥†
                const children = element.querySelectorAll(window._borderManager.VALID_ELEMENTS.join(', '));
                let hasValidChild = false;
                
                for (const child of children) {
                    if (this.VALID_ELEMENTS.includes(child.tagName.toLowerCase()) &&
                        child.getBoundingClientRect().width >= this.MIN_ELEMENT_SIZE || 
                        child.getBoundingClientRect().height >= this.MIN_ELEMENT_SIZE) {
                        hasValidChild = true;
                        break;
                    }
                }

                // Â¶ÇÊûúÊ≤°ÊúâÂêàÈÄÇÁöÑÂ≠êÂÖÉÁ¥†ÔºåÊâçÊ∑ªÂä†ËæπÊ°Ü
                if (!hasValidChild) {
                    const originalStyle = element.getAttribute('style') || '';
                    element.style.border = '2px solid red';
                    element.style.boxSizing = 'border-box';
                    element.dataset.originalStyle = originalStyle;
                    this.borderedElements.add(element);
                    this.createTooltip(element);
                }
            }

            removeBorder(element) {
                if (element.dataset.originalStyle) {
                    element.setAttribute('style', element.dataset.originalStyle);
                } else {
                    element.removeAttribute('style');
                }
                delete element.dataset.originalStyle;
                this.removeTooltip(element);
                this.borderedElements.delete(element);
            }

            toggle() {
                this.isActive = !this.isActive;
                return this.isActive;
            }

            clearAllBorders() {
                this.borderedElements.forEach(element => {
                    this.removeBorder(element);
                });
                this.borderedElements.clear();
            }
        }
        window._borderManager = new BorderManager();
    }

    const isActive = window._borderManager.toggle();

    if (isActive) {
        // ‰ΩøÁî® VALID_ELEMENTS ÊûÑÂª∫ÈÄâÊã©Âô®
        const elements = document.querySelectorAll(window._borderManager.VALID_ELEMENTS.join(', '));
        elements.forEach(element => {
            if (window._borderManager.isValidElement(element)) {
                window._borderManager.addBorder(element);
            }
        });

        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                mutation.addedNodes.forEach(node => {
                    // ‰ΩøÁî® VALID_ELEMENTS Ê£ÄÊü•ËäÇÁÇπÁ±ªÂûã
                    if (node.nodeType === 1 && 
                        window._borderManager.VALID_ELEMENTS.includes(node.tagName.toLowerCase()) && 
                        window._borderManager.isValidElement(node)) {
                        window._borderManager.addBorder(node);
                    }
                });
            });
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });

        window._borderObserver = observer;
    } else {
        window._borderManager.clearAllBorders();
        if (window._borderObserver) {
            window._borderObserver.disconnect();
            delete window._borderObserver;
        }
    }
}

// Ê∑ªÂä†ÈáçÁªòDOMÊ†ëÁöÑÊåâÈíÆ‰∫ã‰ª∂ÁõëÂê¨
document.getElementById('redrawDomTree').addEventListener('click', async () => {
    const button = document.getElementById('redrawDomTree');
    const statusText = document.getElementById('status-text') || createStatusElement();
    
    try {
        button.disabled = true;
        button.textContent = 'ÈáçÁªò‰∏≠...';
        statusText.textContent = '';

        // Ëé∑ÂèñÂΩìÂâçÊ¥ªÂä®Ê†áÁ≠æÈ°µ
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        
        // Ê∏ÖÈô§‰πãÂâçÁöÑÈ´ò‰∫Æ
        await chrome.scripting.executeScript({
            target: { tabId: tab.id },
            func: () => {
                const container = document.getElementById('playwright-highlight-container');
                if (container) {
                    container.remove();
                }
            }
        });

        // ÈáçÊñ∞ÊâßË°åbuildDomTree
        await chrome.scripting.executeScript({
            target: { tabId: tab.id },
            files: ['buildDomTree.js']
        });

        // ÊâßË°åbuildDomTreeÂáΩÊï∞Êù•ÈáçÊñ∞Ê∏≤ÊüìÈ´ò‰∫Æ
        await chrome.scripting.executeScript({
            target: { tabId: tab.id },
            func: (args) => {
                const buildDomTreeFunc = window['buildDomTree'];
                if (buildDomTreeFunc) {
                    return buildDomTreeFunc(args);
                } else {
                    throw new Error('buildDomTreeÂáΩÊï∞Êú™ÊâæÂà∞');
                }
            },
            args: [{ doHighlightElements: true, focusHighlightIndex: -1, viewportExpansion: 0 }]
        });

        statusText.textContent = '‚úÖ ÈáçÁªòÊàêÂäü';
        statusText.style.color = '#4CAF50';
        
    } catch (error) {
        console.error('ÈáçÁªòÂ§±Ë¥•:', error);
        statusText.textContent = `‚ùå ÈáçÁªòÂ§±Ë¥•: ${error.message}`;
        statusText.style.color = 'red';
    } finally {
        button.disabled = false;
        button.textContent = 'üîÑ ÈáçÁªòDOMÊ†ë';
        
        // 3ÁßíÂêéÊ∏ÖÈô§Áä∂ÊÄÅ‰ø°ÊÅØ
        setTimeout(() => {
            statusText.textContent = '';
        }, 3000);
    }
});
